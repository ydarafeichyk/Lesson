{
  "stats": {
    "suites": 5,
    "tests": 32,
    "passes": 21,
    "pending": 0,
    "failures": 11,
    "start": "2022-11-12T16:26:50.920Z",
    "end": "2022-11-12T16:26:50.954Z",
    "duration": 34,
    "testsRegistered": 32,
    "passPercent": 65.625,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48e16f2a-3546-4435-be6f-4ddd6a15e9c2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
          "title": "Check add function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the addition of positive integers 12345678901112 and 1",
              "fullTitle": "Check add function correctly calculates the addition of positive integers 12345678901112 and 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(12345678901112, 1);\nexpect(result).to.equal(12345678901113);",
              "err": {},
              "uuid": "b33fbc26-2b29-4130-9f62-2f99bfe1529a",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of fractional numbers 3.6 and 5.2",
              "fullTitle": "Check add function correctly calculates the addition of fractional numbers 3.6 and 5.2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(3.6, 5.2);\nexpect(result).to.equal(8.8);",
              "err": {},
              "uuid": "fa44529a-dc82-4cb0-bfce-b8f3ade6c994",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of fractional and integer 4.6 and 2000",
              "fullTitle": "Check add function correctly calculates the addition of fractional and integer 4.6 and 2000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(4.6, 2000);\nexpect(result).to.equal(2004.6);",
              "err": {},
              "uuid": "af83dbbb-25c3-4679-8b46-57efd1e0eb61",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of negative numbers -9 and -50",
              "fullTitle": "Check add function correctly calculates the addition of negative numbers -9 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(-9, -50);\nexpect(result).to.equal(-59);",
              "err": {},
              "uuid": "c77ba572-fc6a-4d7b-adbd-98ab0475ead8",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of positive and negative numbers 200 and -50",
              "fullTitle": "Check add function correctly calculates the addition of positive and negative numbers 200 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(200, -50);\nexpect(result).to.equal(150);",
              "err": {},
              "uuid": "61cfa90d-145b-4158-987c-927609430c67",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add function should not return result when only one parameter 200 is used",
              "fullTitle": "Check add function add function should not return result when only one parameter 200 is used",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(200);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected 200 to equal false",
                "estack": "AssertionError: expected 200 to equal false\n    at Context.<anonymous> (test\\test.spec.js:29:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "bf8e0ee8-b0e3-4da8-8b32-ebf82f46e9b9",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when a string is used instead of a number 'a' and 10",
              "fullTitle": "Check add function indicates failure when a string is used instead of a number 'a' and 10",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add('a', 10);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected '0a10' to equal false",
                "estack": "AssertionError: expected '0a10' to equal false\n    at Context.<anonymous> (test\\test.spec.js:33:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "af04905a-19fe-4f02-8e60-f0a03f576ac6",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when two strings is used instead of a numbers 'a' and 'b'",
              "fullTitle": "Check add function indicates failure when two strings is used instead of a numbers 'a' and 'b'",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add('a', 'b');\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected '0ab' to equal false",
                "estack": "AssertionError: expected '0ab' to equal false\n    at Context.<anonymous> (test\\test.spec.js:37:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "c32ddda7-e5cd-4ff4-acac-4aa13d4a6173",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when symbol is used instead of a number $ and 15863489",
              "fullTitle": "Check add function indicates failure when symbol is used instead of a number $ and 15863489",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add($, 15863489);\nexpect(result).to.equal(false);",
              "err": {
                "message": "ReferenceError: $ is not defined",
                "estack": "ReferenceError: $ is not defined\n    at Context.<anonymous> (test\\test.spec.js:40:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "e6354298-8efe-4ca7-a8cb-f798f569f990",
              "parentUUID": "5f11b48b-ef86-42d8-803b-dfc792667ab9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b33fbc26-2b29-4130-9f62-2f99bfe1529a",
            "fa44529a-dc82-4cb0-bfce-b8f3ade6c994",
            "af83dbbb-25c3-4679-8b46-57efd1e0eb61",
            "c77ba572-fc6a-4d7b-adbd-98ab0475ead8",
            "61cfa90d-145b-4158-987c-927609430c67"
          ],
          "failures": [
            "bf8e0ee8-b0e3-4da8-8b32-ebf82f46e9b9",
            "af04905a-19fe-4f02-8e60-f0a03f576ac6",
            "c32ddda7-e5cd-4ff4-acac-4aa13d4a6173",
            "e6354298-8efe-4ca7-a8cb-f798f569f990"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
          "title": "Check myltiply function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the multiplication of positive integers 758694253681 and 0",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of positive integers 758694253681 and 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(758694253681, 0);\nexpect(result).to.equal(0);",
              "err": {},
              "uuid": "7396e4b0-cdfa-4390-b132-e6f7190907fe",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of fractional numbers 10.6 and 20.36",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of fractional numbers 10.6 and 20.36",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(10.6, 20.36);\nexpect(result).to.equal(215.816);",
              "err": {
                "message": "AssertionError: expected 215.81599999999997 to equal 215.816",
                "estack": "AssertionError: expected 215.81599999999997 to equal 215.816\n    at Context.<anonymous> (test\\test.spec.js:51:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 215.81599999999997\n+ 215.816\n"
              },
              "uuid": "fcd4214f-63ba-4268-903a-a5a22712ea8a",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of fractional and integer 14.6 and 20",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of fractional and integer 14.6 and 20",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(14.6, 20);\nexpect(result).to.equal(292);",
              "err": {},
              "uuid": "4b96fd33-d4e3-4625-8bcb-ec5c0a286fa3",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of negative numbers -90 and -50",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of negative numbers -90 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(-90, -50);\nexpect(result).to.equal(4500);",
              "err": {},
              "uuid": "eaf56cdb-0f9d-4403-856b-5ee11d28ad01",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of positive and negative numbers 350 and -50",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of positive and negative numbers 350 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(350, -50);\nexpect(result).to.equal(-17500);",
              "err": {},
              "uuid": "b40eea52-645e-4b38-80d0-94cb1947c446",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "myltiply function should not return result when only one parameter 170 is used",
              "fullTitle": "Check myltiply function myltiply function should not return result when only one parameter 170 is used",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(170);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected 170 to equal false",
                "estack": "AssertionError: expected 170 to equal false\n    at Context.<anonymous> (test\\test.spec.js:67:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "5b36ca20-b15b-4db5-86e4-11c48ae386c4",
              "parentUUID": "eb23fcaf-4e9f-4318-aac4-7a52ec87fe2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7396e4b0-cdfa-4390-b132-e6f7190907fe",
            "4b96fd33-d4e3-4625-8bcb-ec5c0a286fa3",
            "eaf56cdb-0f9d-4403-856b-5ee11d28ad01",
            "b40eea52-645e-4b38-80d0-94cb1947c446"
          ],
          "failures": [
            "fcd4214f-63ba-4268-903a-a5a22712ea8a",
            "5b36ca20-b15b-4db5-86e4-11c48ae386c4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
          "title": "Check subtraction function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the subtraction of positive integers 9 and 500000000000",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of positive integers 9 and 500000000000",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(9, 500000000000);\nexpect(result).to.equal(-499999999991);",
              "err": {},
              "uuid": "b017919c-1e11-456a-8ff5-03117076ab22",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of fractional numbers 150.6 and 120.2",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of fractional numbers 150.6 and 120.2",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(150.6, 120.2);\nexpect(result).to.equal(30.4);",
              "err": {
                "message": "AssertionError: expected 30.39999999999999 to equal 30.4",
                "estack": "AssertionError: expected 30.39999999999999 to equal 30.4\n    at Context.<anonymous> (test\\test.spec.js:77:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 30.39999999999999\n+ 30.4\n"
              },
              "uuid": "0775e2c1-edf5-4a64-b683-bacfb5714e29",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of fractional and integer 15.666 and 2000000",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of fractional and integer 15.666 and 2000000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(15.666, 2000000);\nexpect(result).to.equal(-1999984.334);",
              "err": {},
              "uuid": "22b0e88c-f5ae-43ed-8f9e-61abf8b69fe5",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of negative numbers -170 and -50",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of negative numbers -170 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(-170, -50);\nexpect(result).to.equal(-120);",
              "err": {},
              "uuid": "4adbd653-c6d9-4a1a-853c-9255ec78f84c",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of positive and negative numbers 350 and -50",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of positive and negative numbers 350 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(350, -50);\nexpect(result).to.equal(400);",
              "err": {},
              "uuid": "a2f7ca2c-9db4-4a12-9c5c-dce649e2053e",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "subtraction function should not return result when only one parameter 3500 is used ",
              "fullTitle": "Check subtraction function subtraction function should not return result when only one parameter 3500 is used ",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(3500);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected NaN to equal false",
                "estack": "AssertionError: expected NaN to equal false\n    at Context.<anonymous> (test\\test.spec.js:93:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "65a15b85-f1b3-4231-829b-1d023d4f25f9",
              "parentUUID": "2d2cab5c-23c2-4da6-b3fc-49c449e197c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b017919c-1e11-456a-8ff5-03117076ab22",
            "22b0e88c-f5ae-43ed-8f9e-61abf8b69fe5",
            "4adbd653-c6d9-4a1a-853c-9255ec78f84c",
            "a2f7ca2c-9db4-4a12-9c5c-dce649e2053e"
          ],
          "failures": [
            "0775e2c1-edf5-4a64-b683-bacfb5714e29",
            "65a15b85-f1b3-4231-829b-1d023d4f25f9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
          "title": "Check division function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the division of positive integers 9 and 50000",
              "fullTitle": "Check division function correctly calculates the division of positive integers 9 and 50000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(9, 50000);\nexpect(result).to.equal(0.00018);",
              "err": {},
              "uuid": "178fd057-cd38-4f09-afa2-851bfdc7efbd",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of fractional numbers 20.2 and 2.5",
              "fullTitle": "Check division function correctly calculates the division of fractional numbers 20.2 and 2.5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(20.2, 2.5);\nexpect(result).to.equal(8.08);",
              "err": {},
              "uuid": "f89fe557-26e2-443e-9cd3-2e07a5ba6c0c",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of fractional and integer 20.6 and 2000",
              "fullTitle": "Check division function correctly calculates the division of fractional and integer 20.6 and 2000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(20.6, 2000);\nexpect(result).to.equal(0.0103);",
              "err": {},
              "uuid": "63f8b007-14ae-4e0a-a96a-60c459358304",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of negative numbers -160 and -80",
              "fullTitle": "Check division function correctly calculates the division of negative numbers -160 and -80",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(-160, -80);\nexpect(result).to.equal(2);",
              "err": {},
              "uuid": "b228807a-cfed-4495-9996-57f548fa0a66",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of positive and negative numbers -370 and -50",
              "fullTitle": "Check division function correctly calculates the division of positive and negative numbers -370 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(370, -50);\nexpect(result).to.equal(-7.4);",
              "err": {},
              "uuid": "322a2ef1-7f4d-4d2a-80ac-2f17e5b3f70d",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when division by 0",
              "fullTitle": "Check division function indicates failure when division by 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(350, 0);\nexpect(result).to.equal('На ноль делить нельзя');",
              "err": {
                "message": "AssertionError: expected Infinity to equal 'На ноль делить нельзя'",
                "estack": "AssertionError: expected Infinity to equal 'На ноль делить нельзя'\n    at Context.<anonymous> (test\\test.spec.js:119:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "1f082e04-f346-4263-b066-880517b61250",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "division function should not return result when only one parameter 550 is used ",
              "fullTitle": "Check division function division function should not return result when only one parameter 550 is used ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(550);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected NaN to equal false",
                "estack": "AssertionError: expected NaN to equal false\n    at Context.<anonymous> (test\\test.spec.js:123:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "69f50451-c9d8-4476-ab6b-f3fa1ea9bc10",
              "parentUUID": "8aa498b5-c5ff-4b58-b499-a89cbaed5c8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "178fd057-cd38-4f09-afa2-851bfdc7efbd",
            "f89fe557-26e2-443e-9cd3-2e07a5ba6c0c",
            "63f8b007-14ae-4e0a-a96a-60c459358304",
            "b228807a-cfed-4495-9996-57f548fa0a66",
            "322a2ef1-7f4d-4d2a-80ac-2f17e5b3f70d"
          ],
          "failures": [
            "1f082e04-f346-4263-b066-880517b61250",
            "69f50451-c9d8-4476-ab6b-f3fa1ea9bc10"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "251f2aa7-541a-4ead-86e4-dfe91eb15406",
          "title": "Check exponentiation function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the exponentiation of positive integer 250",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of positive integer 250",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(250);\nexpect(result).to.equal(62500);",
              "err": {},
              "uuid": "2a674493-8527-410a-8d1e-89dc3b4bad2c",
              "parentUUID": "251f2aa7-541a-4ead-86e4-dfe91eb15406",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of fractional number 1.111",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of fractional number 1.111",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(1, 111);\nexpect(result).to.equal(1.234321);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.234321",
                "estack": "AssertionError: expected 1 to equal 1.234321\n    at Context.<anonymous> (test\\test.spec.js:133:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 1\n+ 1.234321\n"
              },
              "uuid": "475ac1ef-3dc3-4cd7-9659-585902cb41b8",
              "parentUUID": "251f2aa7-541a-4ead-86e4-dfe91eb15406",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of negative numbers -1",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of negative numbers -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(-1);\nexpect(result).to.equal(1);",
              "err": {},
              "uuid": "de36a0c7-27cf-494c-aea5-3073fbf18142",
              "parentUUID": "251f2aa7-541a-4ead-86e4-dfe91eb15406",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of 0",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(0);\nexpect(result).to.equal(0);",
              "err": {},
              "uuid": "28863415-8c7c-4f14-bff9-acc25b1c65d3",
              "parentUUID": "251f2aa7-541a-4ead-86e4-dfe91eb15406",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a674493-8527-410a-8d1e-89dc3b4bad2c",
            "de36a0c7-27cf-494c-aea5-3073fbf18142",
            "28863415-8c7c-4f14-bff9-acc25b1c65d3"
          ],
          "failures": [
            "475ac1ef-3dc3-4cd7-9659-585902cb41b8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1500
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}