{
  "stats": {
    "suites": 5,
    "tests": 32,
    "passes": 21,
    "pending": 0,
    "failures": 11,
    "start": "2022-11-12T19:06:05.323Z",
    "end": "2022-11-12T19:06:05.362Z",
    "duration": 39,
    "testsRegistered": 32,
    "passPercent": 65.625,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "08eda024-c1ee-4ff0-889f-9f288a114835",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "848d84e7-6f61-485e-b030-631a7eadc863",
          "title": "Check add function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the addition of positive integers 12345678901112 and 1",
              "fullTitle": "Check add function correctly calculates the addition of positive integers 12345678901112 and 1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(12345678901112, 1);\nexpect(result).to.equal(12345678901113);",
              "err": {},
              "uuid": "885d39a4-934a-4834-b8ba-00fcec1574a9",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of fractional numbers 3.6 and 5.2",
              "fullTitle": "Check add function correctly calculates the addition of fractional numbers 3.6 and 5.2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(3.6, 5.2);\nexpect(result).to.equal(8.8);",
              "err": {},
              "uuid": "6d8cce3b-7c99-462e-bdf2-7030edb2a5fb",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of fractional and integer 4.6 and 2000",
              "fullTitle": "Check add function correctly calculates the addition of fractional and integer 4.6 and 2000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(4.6, 2000);\nexpect(result).to.equal(2004.6);",
              "err": {},
              "uuid": "4b50950a-b0f4-4845-9a39-3a9a18881364",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of negative numbers -9 and -50",
              "fullTitle": "Check add function correctly calculates the addition of negative numbers -9 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(-9, -50);\nexpect(result).to.equal(-59);",
              "err": {},
              "uuid": "75b43722-5d5b-43e1-8f36-f8a604799913",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the addition of positive and negative numbers 200 and -50",
              "fullTitle": "Check add function correctly calculates the addition of positive and negative numbers 200 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(200, -50);\nexpect(result).to.equal(150);",
              "err": {},
              "uuid": "00f91d55-70a1-450f-86a5-a17c250d0d8f",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add function should not return result when only one parameter 200 is used",
              "fullTitle": "Check add function add function should not return result when only one parameter 200 is used",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add(200);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected 200 to equal false",
                "estack": "AssertionError: expected 200 to equal false\n    at Context.<anonymous> (test\\test.spec.js:29:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "d792acbd-8565-4047-b7fe-6eccab4b3227",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when a string is used instead of a number 'a' and 10",
              "fullTitle": "Check add function indicates failure when a string is used instead of a number 'a' and 10",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add('a', 10);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected '0a10' to equal false",
                "estack": "AssertionError: expected '0a10' to equal false\n    at Context.<anonymous> (test\\test.spec.js:33:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "e06591ac-0b14-4f44-8ad2-43d6163d6e14",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when two strings is used instead of a numbers 'a' and 'b'",
              "fullTitle": "Check add function indicates failure when two strings is used instead of a numbers 'a' and 'b'",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add('a', 'b');\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected '0ab' to equal false",
                "estack": "AssertionError: expected '0ab' to equal false\n    at Context.<anonymous> (test\\test.spec.js:37:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "f782025f-3365-411c-8488-4bbc92b248f6",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when symbol is used instead of a number $ and 15863489",
              "fullTitle": "Check add function indicates failure when symbol is used instead of a number $ and 15863489",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.add($, 15863489);\nexpect(result).to.equal(false);",
              "err": {
                "message": "ReferenceError: $ is not defined",
                "estack": "ReferenceError: $ is not defined\n    at Context.<anonymous> (test\\test.spec.js:40:35)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "32a8c166-6c24-4bac-af2d-d479c63678e3",
              "parentUUID": "848d84e7-6f61-485e-b030-631a7eadc863",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "885d39a4-934a-4834-b8ba-00fcec1574a9",
            "6d8cce3b-7c99-462e-bdf2-7030edb2a5fb",
            "4b50950a-b0f4-4845-9a39-3a9a18881364",
            "75b43722-5d5b-43e1-8f36-f8a604799913",
            "00f91d55-70a1-450f-86a5-a17c250d0d8f"
          ],
          "failures": [
            "d792acbd-8565-4047-b7fe-6eccab4b3227",
            "e06591ac-0b14-4f44-8ad2-43d6163d6e14",
            "f782025f-3365-411c-8488-4bbc92b248f6",
            "32a8c166-6c24-4bac-af2d-d479c63678e3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
          "title": "Check myltiply function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the multiplication of positive integers 758694253681 and 0",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of positive integers 758694253681 and 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(758694253681, 0);\nexpect(result).to.equal(0);",
              "err": {},
              "uuid": "7df59e60-f929-4555-972c-a0de1c45c401",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of fractional numbers 10.6 and 20.36",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of fractional numbers 10.6 and 20.36",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(10.6, 20.36);\nexpect(result).to.equal(215.816);",
              "err": {
                "message": "AssertionError: expected 215.81599999999997 to equal 215.816",
                "estack": "AssertionError: expected 215.81599999999997 to equal 215.816\n    at Context.<anonymous> (test\\test.spec.js:51:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 215.81599999999997\n+ 215.816\n"
              },
              "uuid": "504f1b56-4811-43c8-8a53-59a86768d132",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of fractional and integer 14.6 and 20",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of fractional and integer 14.6 and 20",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(14.6, 20);\nexpect(result).to.equal(292);",
              "err": {},
              "uuid": "2d47f54b-c6bd-4bbd-85a1-9049ba3b61d5",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of negative numbers -90 and -50",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of negative numbers -90 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(-90, -50);\nexpect(result).to.equal(4500);",
              "err": {},
              "uuid": "b6c22dcb-ef3d-4b44-84f1-0158e8e267fb",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the multiplication of positive and negative numbers 350 and -50",
              "fullTitle": "Check myltiply function correctly calculates the multiplication of positive and negative numbers 350 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(350, -50);\nexpect(result).to.equal(-17500);",
              "err": {},
              "uuid": "dda24046-bcfe-4d5a-b994-6eceb50ae565",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "myltiply function should not return result when only one parameter 170 is used",
              "fullTitle": "Check myltiply function myltiply function should not return result when only one parameter 170 is used",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.multiply(170);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected 170 to equal false",
                "estack": "AssertionError: expected 170 to equal false\n    at Context.<anonymous> (test\\test.spec.js:67:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "1e474b27-3ffd-44a4-970f-b7c7d4573f42",
              "parentUUID": "da28d8b6-08c0-44cf-bb9c-931f5e1777bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7df59e60-f929-4555-972c-a0de1c45c401",
            "2d47f54b-c6bd-4bbd-85a1-9049ba3b61d5",
            "b6c22dcb-ef3d-4b44-84f1-0158e8e267fb",
            "dda24046-bcfe-4d5a-b994-6eceb50ae565"
          ],
          "failures": [
            "504f1b56-4811-43c8-8a53-59a86768d132",
            "1e474b27-3ffd-44a4-970f-b7c7d4573f42"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
          "title": "Check subtraction function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the subtraction of positive integers 9 and 500000000000",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of positive integers 9 and 500000000000",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(9, 500000000000);\nexpect(result).to.equal(-499999999991);",
              "err": {},
              "uuid": "47068ef1-5de8-40ee-97b5-fe924dad6ef9",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of fractional numbers 150.6 and 120.2",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of fractional numbers 150.6 and 120.2",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(150.6, 120.2);\nexpect(result).to.equal(30.4);",
              "err": {
                "message": "AssertionError: expected 30.39999999999999 to equal 30.4",
                "estack": "AssertionError: expected 30.39999999999999 to equal 30.4\n    at Context.<anonymous> (test\\test.spec.js:77:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 30.39999999999999\n+ 30.4\n"
              },
              "uuid": "a5ef281a-1cc9-4911-9953-961a3fa68c30",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of fractional and integer 15.666 and 2000000",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of fractional and integer 15.666 and 2000000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(15.666, 2000000);\nexpect(result).to.equal(-1999984.334);",
              "err": {},
              "uuid": "28b9f4f3-2541-445e-9606-992b318d1982",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of negative numbers -170 and -50",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of negative numbers -170 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(-170, -50);\nexpect(result).to.equal(-120);",
              "err": {},
              "uuid": "a558c829-266c-4095-a12a-56602b16a89d",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the subtraction of positive and negative numbers 350 and -50",
              "fullTitle": "Check subtraction function correctly calculates the subtraction of positive and negative numbers 350 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(350, -50);\nexpect(result).to.equal(400);",
              "err": {},
              "uuid": "e2592e89-9410-4da8-b358-8a4c4f6651bc",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "subtraction function should not return result when only one parameter 3500 is used ",
              "fullTitle": "Check subtraction function subtraction function should not return result when only one parameter 3500 is used ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.subtraction(3500);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected NaN to equal false",
                "estack": "AssertionError: expected NaN to equal false\n    at Context.<anonymous> (test\\test.spec.js:93:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "1219dbb3-5ac8-4e60-94e4-bfd3425e21b6",
              "parentUUID": "c641a0a5-6f80-41a0-bb77-effe6d7c3e19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47068ef1-5de8-40ee-97b5-fe924dad6ef9",
            "28b9f4f3-2541-445e-9606-992b318d1982",
            "a558c829-266c-4095-a12a-56602b16a89d",
            "e2592e89-9410-4da8-b358-8a4c4f6651bc"
          ],
          "failures": [
            "a5ef281a-1cc9-4911-9953-961a3fa68c30",
            "1219dbb3-5ac8-4e60-94e4-bfd3425e21b6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
          "title": "Check division function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the division of positive integers 9 and 50000",
              "fullTitle": "Check division function correctly calculates the division of positive integers 9 and 50000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(9, 50000);\nexpect(result).to.equal(0.00018);",
              "err": {},
              "uuid": "595dc81f-b4d3-4107-a055-96f3eff5443b",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of fractional numbers 20.2 and 2.5",
              "fullTitle": "Check division function correctly calculates the division of fractional numbers 20.2 and 2.5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(20.2, 2.5);\nexpect(result).to.equal(8.08);",
              "err": {},
              "uuid": "ce5b51e4-e91a-4879-8106-5c8f59976e08",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of fractional and integer 20.6 and 2000",
              "fullTitle": "Check division function correctly calculates the division of fractional and integer 20.6 and 2000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(20.6, 2000);\nexpect(result).to.equal(0.0103);",
              "err": {},
              "uuid": "f492140f-f0ba-4a73-b6f2-5fb6cb530bed",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of negative numbers -160 and -80",
              "fullTitle": "Check division function correctly calculates the division of negative numbers -160 and -80",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(-160, -80);\nexpect(result).to.equal(2);",
              "err": {},
              "uuid": "26352208-d3a5-42bb-923b-21be51d4c2d0",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the division of positive and negative numbers -370 and -50",
              "fullTitle": "Check division function correctly calculates the division of positive and negative numbers -370 and -50",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(370, -50);\nexpect(result).to.equal(-7.4);",
              "err": {},
              "uuid": "2dd3ed98-cf40-45f1-b296-5b7113e5fa30",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "indicates failure when division by 0",
              "fullTitle": "Check division function indicates failure when division by 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(350, 0);\nexpect(result).to.equal('На ноль делить нельзя');",
              "err": {
                "message": "AssertionError: expected Infinity to equal 'На ноль делить нельзя'",
                "estack": "AssertionError: expected Infinity to equal 'На ноль делить нельзя'\n    at Context.<anonymous> (test\\test.spec.js:119:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "232f0d6f-f671-40f7-9602-817c5387fc6f",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "division function should not return result when only one parameter 550 is used ",
              "fullTitle": "Check division function division function should not return result when only one parameter 550 is used ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.divide(550);\nexpect(result).to.equal(false);",
              "err": {
                "message": "AssertionError: expected NaN to equal false",
                "estack": "AssertionError: expected NaN to equal false\n    at Context.<anonymous> (test\\test.spec.js:123:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "60c775ea-a7f4-4e5b-b853-2c395b7b0494",
              "parentUUID": "c635c9c5-42c4-4eeb-b30f-de939dd1a737",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "595dc81f-b4d3-4107-a055-96f3eff5443b",
            "ce5b51e4-e91a-4879-8106-5c8f59976e08",
            "f492140f-f0ba-4a73-b6f2-5fb6cb530bed",
            "26352208-d3a5-42bb-923b-21be51d4c2d0",
            "2dd3ed98-cf40-45f1-b296-5b7113e5fa30"
          ],
          "failures": [
            "232f0d6f-f671-40f7-9602-817c5387fc6f",
            "60c775ea-a7f4-4e5b-b853-2c395b7b0494"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        },
        {
          "uuid": "f37088ab-c1b8-417c-bf17-e0531eb898e1",
          "title": "Check exponentiation function",
          "fullFile": "E:\\Microsoft VS Code\\IT-ACADEMY\\Lesson\\lesson14\\mochal\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correctly calculates the exponentiation of positive integer 250",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of positive integer 250",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(250);\nexpect(result).to.equal(62500);",
              "err": {},
              "uuid": "b4297ea1-2565-479b-85fa-8dfb5bdd24a2",
              "parentUUID": "f37088ab-c1b8-417c-bf17-e0531eb898e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of fractional number 1.111",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of fractional number 1.111",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(1, 111);\nexpect(result).to.equal(1.234321);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.234321",
                "estack": "AssertionError: expected 1 to equal 1.234321\n    at Context.<anonymous> (test\\test.spec.js:133:23)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "- 1\n+ 1.234321\n"
              },
              "uuid": "8b5fcbcf-4f6d-46cb-8c86-7d0b6c0eb4b4",
              "parentUUID": "f37088ab-c1b8-417c-bf17-e0531eb898e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of negative numbers -1",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of negative numbers -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(-1);\nexpect(result).to.equal(1);",
              "err": {},
              "uuid": "96515f9e-5ed0-431a-beff-a0b3f28b6d2a",
              "parentUUID": "f37088ab-c1b8-417c-bf17-e0531eb898e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correctly calculates the exponentiation of 0",
              "fullTitle": "Check exponentiation function correctly calculates the exponentiation of 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = calculator.exponentiation(0);\nexpect(result).to.equal(0);",
              "err": {},
              "uuid": "dbf01714-3e11-4091-a272-3cdb34e6fcbb",
              "parentUUID": "f37088ab-c1b8-417c-bf17-e0531eb898e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4297ea1-2565-479b-85fa-8dfb5bdd24a2",
            "96515f9e-5ed0-431a-beff-a0b3f28b6d2a",
            "dbf01714-3e11-4091-a272-3cdb34e6fcbb"
          ],
          "failures": [
            "8b5fcbcf-4f6d-46cb-8c86-7d0b6c0eb4b4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1500
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1500
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}